----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 06/20/2020 01:57:18 PM
-- Design Name: 
-- Module Name: image - main
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity image is
    Port ( clk : in STD_LOGIC;
           rst,en : in STD_LOGIC;
           mode: in std_logic_vector(1 downto 0);
           R,G,B : out STD_LOGIC_VECTOR (7 downto 0);
           hsync,vsync,de,clkv : out STD_LOGIC;
           cntt: out std_logic_vector(9 downto 0));
end image;

architecture main of image is

--signal cnt : integer := 0;
subtype states is integer range 0 to 2;
signal s,fs : states := 0;
signal clkbuff : std_logic_vector(31 downto 0);
signal cn,cn2,cn3,cn4 : unsigned(31 downto 0) := (others => '0');
signal clk1,clk2,clk3,clk4,clks: std_logic;

constant last: integer := 342;
type ROM is array (last-1 downto 0) of integer range 0 to 255;
constant h : std_logic_vector(last-1 downto 0) := "000000000000000111000000000000000011100000000000000001110000000000000000111000000000000000011100000000000000001110000000000000000111000000000000000011100000000000000001110000000000000000111000000000000000011100000000000000001110000000000000000111000000000000000011100000000000000001110000000000000000111000000000000000011100000000000000001110";
constant v : std_logic_vector(last-1 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111110000000000000000000";
constant d : std_logic_vector(last-1 downto 0) := "111111111111111000011111111111111100001111111111111110000111111111111111000011111111111111100001111111111111110000111111111111111000011111111111111100001111111111111110000111111111111111000011111111111111100001111111111111110000111111111111111000011111111111111100001111111111111110000000000000000000000000000000000000000000000000000000000000";
constant RM : ROM := (255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,209,158,107,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,209,158,107,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,209,158,107,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,209,158,107,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,209,158,107,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255);
constant GM : ROM := (255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255);
constant BM : ROM := (255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255);

begin

process(clk,rst)
begin
    if rst='1' then
        cn <= (others => '0');
        clk1 <= '0';
    elsif clk='1' and clk'event and en='1' then
        if cn = 10000000 then
            clk1 <= not clk1;
            cn <= (others => '0'); 
        else
            cn <= cn+1;
        end if;
    end if;
end process;

process(clk,rst)
begin
    if rst='1' then
        cn2 <= (others => '0');
        clk2 <= '0';
    elsif clk='1' and clk'event and en='1' then
        if cn2 = 5000000 then
            clk2 <= not clk2;
            cn2 <= (others => '0'); 
        else
            cn2 <= cn2+1;
        end if;
    end if;
end process;

process(clk,rst)
begin
    if rst='1' then
        cn3 <= (others => '0');
        clk3 <= '0';
    elsif clk='1' and clk'event and en='1' then
        if cn3 = 1000000 then
            clk3 <= not clk3;
            cn3 <= (others => '0'); 
        else
            cn3 <= cn3+1;
        end if;
    end if;
end process;

--process(clk,rst)
--begin
--    if rst='1' then
--        cn4 <= (others => '0');
--        clk4 <= '0';
--    elsif clk='1' and clk'event and en='1' then
--        if cn = 500000 then
--            clk4 <= not clk4;
--            cn4 <= (others => '0'); 
--        else
--            cn4 <= cn4+1;
--        end if;
--    end if;
--end process;

clkbuff <= std_logic_vector(cn);



clks <= clk1 when mode="00" else
        clk2 when mode="01" else
        clk3 when mode="10" else
        clk;


process(clks,rst)
variable cnt : integer := 0;
begin
    if rst='1' then
        s <= 0;
        cnt := 0;
        clkv <= '0';
    elsif clks='1' and clks'event then
        cntt <= std_logic_vector(to_unsigned(cnt,10));

        if en='1' then
            case s is
                when 0 =>               
                    s <= 1;
                    clkv <='0';
                when others =>
                    clkv <='1';
                    if cnt=last-1 then
                        cnt := cnt;
                        s <= 1;
                    else 
                        cnt := cnt+1;
                        s <= 0;
                    end if;
                    R <= std_logic_vector(to_unsigned(RM(cnt),8));
                    G <= std_logic_vector(to_unsigned(GM(cnt),8));
                    B <= std_logic_vector(to_unsigned(BM(cnt),8));
                    vsync<= v(cnt);
                    hsync<= h(cnt);
                    de<=d(cnt);
            end case;
        end if;
    end if;
end process;







end main;
